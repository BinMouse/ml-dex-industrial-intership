// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Transforms;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static Ml_dex_industrial_intership.Program;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace Ml_dex_industrial_intership
{
    public partial class MLAnimeRatingPredictor
    {
        public const string RetrainFilePath =  @"F:\Projects\ML\ml-dex-industrial-practice\ml-dex-industrial-intership\input\anime.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;
        public const bool RetrainAllowQuoting =  true;

        private static string[] _cachedGenres;

        /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();
            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            GetUniqueGenresFromIDataView(data);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader, allowQuoting: allowQuoting);
        }

        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }

        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext, trainData);
            Console.WriteLine(trainData.Schema.GetColumnOrNull("name"));
            var model = pipeline.Fit(trainData);
            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext, IDataView trainData)
        {
            // Data process configuration with pipeline data transformations
            //var pipeline = mlContext.Transforms.CustomMapping<ModelInput, TempruaryModelInput>(
            //                            (input, output) => {
            //                                if (_cachedGenres == null || _cachedGenres.Length == 0)
            //                                    GetUniqueGenresFromIDataView(trainData);
            //                                CreateMultiHotVector(input, output, _cachedGenres);
            //                            },
            //                            null)                
            //                        .Append(mlContext.Transforms.ReplaceMissingValues(@"members", @"members"))
            //                        .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"name",outputColumnName:@"name"))
            //                        .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"type",outputColumnName:@"type"))      
            //                        .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"episodes",outputColumnName:@"episodes"))      
            //                        .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"members",@"name", @"EncodedGenre", @"type",@"episodes"}))      
            //                        .Append(mlContext.Regression.Trainers.FastForest(new FastForestRegressionTrainer.Options(){NumberOfTrees=11,NumberOfLeaves=4,FeatureFraction=0.9672286F,LabelColumnName=@"rating",FeatureColumnName=@"Features"}));


            var pipeline = mlContext.Transforms.ReplaceMissingValues(@"members", @"members")
                                    .Append(mlContext.Transforms.CustomMapping(new GenreMultiHotMapping().GetMapping(), contractName: "GenresMultiHotTransforming"))
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName: @"name", outputColumnName: @"name"))
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName: @"type", outputColumnName: @"type"))
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName: @"episodes", outputColumnName: @"episodes"))
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new[] { @"members", @"name", @"EncodedGenre", @"type", @"episodes" }))
                                    .Append(mlContext.Regression.Trainers.FastForest(new FastForestRegressionTrainer.Options() { NumberOfTrees = 11, NumberOfLeaves = 4, FeatureFraction = 0.9672286F, LabelColumnName = @"rating", FeatureColumnName = @"Features" }));

            return pipeline;
        }

        /// <summary>
        /// Multi-hot encoding for genres in the input data.
        /// </summary>
        [CustomMappingFactoryAttribute("GenresMultiHotTransforming")]
        private class GenreMultiHotMapping : CustomMappingFactory<ModelInput, TempruaryModelInput>
        {
            public override Action<ModelInput, TempruaryModelInput> GetMapping()
                => (input, output) =>
                {
                    var allGenres = MLAnimeRatingPredictor.GetCachedGenres();
                    CreateMultiHotVector(input, output, allGenres);
                };
        }

        /// <summary>
        /// Get unique genres from the anime list.
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static void GetUniqueGenresFromIDataView(IDataView data)
        {
            var genreColumn = data.GetColumn<string>("genre");
            var allGenres = new HashSet<string>();
            foreach (var genreString in genreColumn)
            {
                if (!string.IsNullOrWhiteSpace(genreString))
                {
                    var genres = genreString
                        .Split(',', StringSplitOptions.RemoveEmptyEntries)
                        .Select(g => g.Trim());
                    foreach (var genre in genres)
                    {
                        allGenres.Add(genre);
                    }
                }
            }
            _cachedGenres = allGenres.OrderBy(g => g).ToArray();
        }

        /// <summary>
        /// Milti-hot encoding for genres in the input data.
        /// </summary>
        /// <param name="input"></param>
        /// <param name="output"></param>
        /// <param name="allGenres"></param>
        private static void CreateMultiHotVector(ModelInput input, TempruaryModelInput output, string[] allGenres)
        {
            var currentGenres = input.Genre
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(g => g.Trim())
                .Distinct()
                .ToHashSet();
            output.Genre = new float[100];
            for (int i = 0; i < allGenres.Length; i++)
            {
                output.Genre[i] = currentGenres.Contains(allGenres[i]) ? 1.0f : 0.0f;
            }
        }

        /// <summary>
        /// Get cached genres.
        /// </summary>
        /// <returns></returns>
        /// <exception cref="InvalidOperationException"></exception>
        public static string[] GetCachedGenres()
        {
            if (_cachedGenres == null || _cachedGenres.Length == 0)
                throw new InvalidOperationException("Genres not initialized. Call GetUniqueGenresFromIDataView first.");
            return _cachedGenres;
        }

        /// <summary>
        /// Temporary model input class for multi-hot encoding genres.
        /// </summary>
        class TempruaryModelInput
        {
            [VectorType(100)]
            [ColumnName(@"EncodedGenre")]
            public float[] Genre { get; set; }
        }

    }
 }
